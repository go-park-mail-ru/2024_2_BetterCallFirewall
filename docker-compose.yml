version: '3.9'

services:
  authgrpc:
    image: slashlight/authgrpc:latest
    restart: always
    ports:
      - "7072:7072"
    depends_on:
      - redis

  profilegrpc:
    image: slashlight/profilegrpc:latest
    restart: always
    ports:
      - "7074:7074"
    depends_on:
      - db
      - authgrpc
  postgrpc:
    image: slashlight/postgrpc:latest
    restart: always
    ports:
      - "7075:7075"
    depends_on:
      - db
      - profilegrpc

  community:
    image: slashlight/community:latest
    restart: always
    ports:
      - "8086:8086"
      - "7076:7076"
    depends_on:
      - db
      - authgrpc

  auth:
    image: slashlight/auth:latest
    restart: always
    ports:
      - "8082:8082"
    depends_on:
      - redis
      - profilegrpc
      - community

  file:
    image: slashlight/file:latest
    volumes:
      - ./image:/image
    restart: always
    ports:
      - "8083:8083"
    depends_on:
      - authgrpc
      - auth

  profile:
    image: slashlight/profile:latest
    restart: always
    ports:
      - "8084:8084"
    depends_on:
      - db
      - authgrpc
      - postgrpc
      - file

  post:
    image: slashlight/post:latest
    restart: always
    ports:
      - "8085:8085"
    depends_on:
      - db
      - authgrpc
      - profilegrpc
      - community
      - profile
  chat:
    image: slashlight/chat:latest
    restart: always
    ports:
      - "8087:8087"
    depends_on:
      - db
      - authgrpc
      - post

  stickers:
    build:
      context: .
      dockerfile: Dockerfilesticker
    restart: always
    ports:
      - "8088:8088"
    depends_on:
      - db
      - authgrpc

  db:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - DATABASE_HOST=${DB_HOST}
    volumes:
      - postgres_data:/var/lib/postgresql/vk_app_data
    expose:
      - 5432
    healthcheck:
      test: "pg_isready --username=postgres && psql --username=postgres --list"
      timeout: 10s
      retries: 20
  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    volumes:
      - ./redisdata:/data
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    tty: true
    stdin_open: true

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus.yml"
    command:
      - --config.file=/etc/prometheus.yml
      - --web.enable-admin-api

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"

  node_exporter:
    depends_on:
      - prometheus
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - --path.procfs=/host/proc
      - --path.sysfs=/host/sys
      - --collector.filesystem.ignored-mount-points
      - ^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
    ports:
      - "9100:9100"

  watchtower:
    image: containrrr/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - WATCHTOWER_POLL_INTERVAL=60
      - WATCHTOWER_USERNAME=${DOCKER_USERNAME}
      - WATCHTOWER_PASSWORD=${DOCKER_PASSWORD}


volumes:
  postgres_data: