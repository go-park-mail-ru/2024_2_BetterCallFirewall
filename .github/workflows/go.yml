# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "BCFL-32-ci/cd" ]

jobs:

  linter:
    runs-on: ubuntu-latest
    steps:
      - run:
          sudo apt-get install libwebp-dev
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: '1.22'
          cache: false
      - name: install golangci lint
        run:  curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.53.0
      - name: golangci-lint
        run: golangci-lint run --new-from-rev origin/main

  tests:
    needs: linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.22'
      - name: Run test with cover
        run: 
          sudo apt-get install libwebp-dev
          sudo apt-get install -y wkhtmltopdf
      - name: Build
        run: go build -v ./...
      - name: Test
        run: go test -v ./...
         
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    - name: Fetch .env file from server
      run: |
         ssh -o StrictHostKeyChecking=no ubuntu@185.241.194.197 '
            # Read the contents of the .env file and output it
            cat /2024_2_BetterCallFirewall/.env
          ' > .env
    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_LOGIN }} --password-stdin
    - name: Build Docker images
      run: |
        for service in auth authgrpc chat community file post postgrpc profile profilegrpc; do
          docker build -t slashlight/${service}:${GITHUB_SHA::8} -t slashlight/${service}:latest -f Dockerfile${service} .
          docker push slashlight/${service}:${GITHUB_SHA::8}
          docker push slashlight/${service}:latest
        done
      
