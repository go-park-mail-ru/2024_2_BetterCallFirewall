// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -destination=mock.go -source=controller.go -package=controller
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockfileService is a mock of fileService interface.
type MockfileService struct {
	ctrl     *gomock.Controller
	recorder *MockfileServiceMockRecorder
	isgomock struct{}
}

// MockfileServiceMockRecorder is the mock recorder for MockfileService.
type MockfileServiceMockRecorder struct {
	mock *MockfileService
}

// NewMockfileService creates a new mock instance.
func NewMockfileService(ctrl *gomock.Controller) *MockfileService {
	mock := &MockfileService{ctrl: ctrl}
	mock.recorder = &MockfileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileService) EXPECT() *MockfileServiceMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockfileService) Download(ctx context.Context, file io.Reader, format string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, file, format)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockfileServiceMockRecorder) Download(ctx, file, format any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockfileService)(nil).Download), ctx, file, format)
}

// DownloadNonImage mocks base method.
func (m *MockfileService) DownloadNonImage(ctx context.Context, file io.Reader, format, realName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadNonImage", ctx, file, format, realName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadNonImage indicates an expected call of DownloadNonImage.
func (mr *MockfileServiceMockRecorder) DownloadNonImage(ctx, file, format, realName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadNonImage", reflect.TypeOf((*MockfileService)(nil).DownloadNonImage), ctx, file, format, realName)
}

// Upload mocks base method.
func (m *MockfileService) Upload(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockfileServiceMockRecorder) Upload(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockfileService)(nil).Upload), ctx, name)
}

// UploadNonImage mocks base method.
func (m *MockfileService) UploadNonImage(ctx context.Context, name string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadNonImage", ctx, name)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UploadNonImage indicates an expected call of UploadNonImage.
func (mr *MockfileServiceMockRecorder) UploadNonImage(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadNonImage", reflect.TypeOf((*MockfileService)(nil).UploadNonImage), ctx, name)
}

// Mockresponder is a mock of responder interface.
type Mockresponder struct {
	ctrl     *gomock.Controller
	recorder *MockresponderMockRecorder
	isgomock struct{}
}

// MockresponderMockRecorder is the mock recorder for Mockresponder.
type MockresponderMockRecorder struct {
	mock *Mockresponder
}

// NewMockresponder creates a new mock instance.
func NewMockresponder(ctrl *gomock.Controller) *Mockresponder {
	mock := &Mockresponder{ctrl: ctrl}
	mock.recorder = &MockresponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockresponder) EXPECT() *MockresponderMockRecorder {
	return m.recorder
}

// ErrorBadRequest mocks base method.
func (m *Mockresponder) ErrorBadRequest(w http.ResponseWriter, err error, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorBadRequest", w, err, requestID)
}

// ErrorBadRequest indicates an expected call of ErrorBadRequest.
func (mr *MockresponderMockRecorder) ErrorBadRequest(w, err, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorBadRequest", reflect.TypeOf((*Mockresponder)(nil).ErrorBadRequest), w, err, requestID)
}

// LogError mocks base method.
func (m *Mockresponder) LogError(err error, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", err, requestID)
}

// LogError indicates an expected call of LogError.
func (mr *MockresponderMockRecorder) LogError(err, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*Mockresponder)(nil).LogError), err, requestID)
}

// OutputBytes mocks base method.
func (m *Mockresponder) OutputBytes(w http.ResponseWriter, data []byte, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputBytes", w, data, requestID)
}

// OutputBytes indicates an expected call of OutputBytes.
func (mr *MockresponderMockRecorder) OutputBytes(w, data, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputBytes", reflect.TypeOf((*Mockresponder)(nil).OutputBytes), w, data, requestID)
}

// OutputJSON mocks base method.
func (m *Mockresponder) OutputJSON(w http.ResponseWriter, data any, requestId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputJSON", w, data, requestId)
}

// OutputJSON indicates an expected call of OutputJSON.
func (mr *MockresponderMockRecorder) OutputJSON(w, data, requestId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputJSON", reflect.TypeOf((*Mockresponder)(nil).OutputJSON), w, data, requestId)
}
