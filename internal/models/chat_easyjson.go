// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels(in *jlexer.Lexer, out *MessageContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "text":
			out.Text = string(in.String())
		case "file_path":
			if in.IsNull() {
				in.Skip()
				out.FilePath = nil
			} else {
				in.Delim('[')
				if out.FilePath == nil {
					if !in.IsDelim(']') {
						out.FilePath = make([]string, 0, 4)
					} else {
						out.FilePath = []string{}
					}
				} else {
					out.FilePath = (out.FilePath)[:0]
				}
				for !in.IsDelim(']') {
					var v1 string
					v1 = string(in.String())
					out.FilePath = append(out.FilePath, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sticker_path":
			out.StickerPath = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels(out *jwriter.Writer, in MessageContent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix[1:])
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"file_path\":"
		out.RawString(prefix)
		if in.FilePath == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.FilePath {
				if v2 > 0 {
					out.RawByte(',')
				}
				out.String(string(v3))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"sticker_path\":"
		out.RawString(prefix)
		out.String(string(in.StickerPath))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MessageContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MessageContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MessageContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MessageContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels(l, v)
}
func easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels1(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "sender":
			out.Sender = uint32(in.Uint32())
		case "receiver":
			out.Receiver = uint32(in.Uint32())
		case "content":
			(out.Content).UnmarshalEasyJSON(in)
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels1(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"sender\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.Sender))
	}
	{
		const prefix string = ",\"receiver\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Receiver))
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		(in.Content).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels1(l, v)
}
func easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels2(in *jlexer.Lexer, out *Chat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "last_message":
			out.LastMessage = string(in.String())
		case "last_date":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastDate).UnmarshalJSON(data))
			}
		case "receiver":
			easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels3(in, &out.Receiver)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels2(out *jwriter.Writer, in Chat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"last_message\":"
		out.RawString(prefix[1:])
		out.String(string(in.LastMessage))
	}
	{
		const prefix string = ",\"last_date\":"
		out.RawString(prefix)
		out.Raw((in.LastDate).MarshalJSON())
	}
	{
		const prefix string = ",\"receiver\":"
		out.RawString(prefix)
		easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels3(out, in.Receiver)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Chat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Chat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Chat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Chat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels2(l, v)
}
func easyjson9b8f5552DecodeGithubCom20242BetterCallFirewallInternalModels3(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author_id":
			out.AuthorID = uint32(in.Uint32())
		case "community_id":
			out.CommunityID = uint32(in.Uint32())
		case "author":
			out.Author = string(in.String())
		case "avatar":
			out.Avatar = Picture(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubCom20242BetterCallFirewallInternalModels3(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.AuthorID))
	}
	{
		const prefix string = ",\"community_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CommunityID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}
