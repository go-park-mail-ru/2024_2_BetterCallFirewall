// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels(in *jlexer.Lexer, out *CommunityCard) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = Picture(in.String())
		case "about":
			out.About = string(in.String())
		case "is_followed":
			out.IsFollowed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels(out *jwriter.Writer, in CommunityCard) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if in.IsFollowed {
		const prefix string = ",\"is_followed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFollowed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommunityCard) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommunityCard) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommunityCard) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommunityCard) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels(l, v)
}
func easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels1(in *jlexer.Lexer, out *Community) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "avatar":
			out.Avatar = Picture(in.String())
		case "about":
			out.About = string(in.String())
		case "count_subscribers":
			out.CountSubscribers = uint32(in.Uint32())
		case "is_admin":
			out.IsAdmin = bool(in.Bool())
		case "is_followed":
			out.IsFollowed = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels1(out *jwriter.Writer, in Community) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"count_subscribers\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CountSubscribers))
	}
	if in.IsAdmin {
		const prefix string = ",\"is_admin\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAdmin))
	}
	if in.IsFollowed {
		const prefix string = ",\"is_followed\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsFollowed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Community) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Community) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson798dd0c9EncodeGithubCom20242BetterCallFirewallInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Community) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Community) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson798dd0c9DecodeGithubCom20242BetterCallFirewallInternalModels1(l, v)
}
