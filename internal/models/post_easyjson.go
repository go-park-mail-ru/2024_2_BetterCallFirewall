// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels(in *jlexer.Lexer, out *Post) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "header":
			(out.Header).UnmarshalEasyJSON(in)
		case "post_content":
			(out.PostContent).UnmarshalEasyJSON(in)
		case "likes_count":
			out.LikesCount = uint32(in.Uint32())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		case "comment_count":
			out.CommentCount = uint32(in.Uint32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels(out *jwriter.Writer, in Post) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		(in.Header).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"post_content\":"
		out.RawString(prefix)
		(in.PostContent).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"likes_count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.LikesCount))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	{
		const prefix string = ",\"comment_count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CommentCount))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Post) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Post) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Post) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Post) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels(l, v)
}
func easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels1(in *jlexer.Lexer, out *Header) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "author_id":
			out.AuthorID = uint32(in.Uint32())
		case "community_id":
			out.CommunityID = uint32(in.Uint32())
		case "author":
			out.Author = string(in.String())
		case "avatar":
			out.Avatar = Picture(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels1(out *jwriter.Writer, in Header) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"author_id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.AuthorID))
	}
	{
		const prefix string = ",\"community_id\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CommunityID))
	}
	{
		const prefix string = ",\"author\":"
		out.RawString(prefix)
		out.String(string(in.Author))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		out.String(string(in.Avatar))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Header) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Header) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Header) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Header) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels1(l, v)
}
func easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels2(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "header":
			(out.Header).UnmarshalEasyJSON(in)
		case "content":
			(out.Content).UnmarshalEasyJSON(in)
		case "likes_count":
			out.LikesCount = uint32(in.Uint32())
		case "is_liked":
			out.IsLiked = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels2(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"header\":"
		out.RawString(prefix)
		(in.Header).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"content\":"
		out.RawString(prefix)
		(in.Content).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"likes_count\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.LikesCount))
	}
	{
		const prefix string = ",\"is_liked\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsLiked))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5a72dc82EncodeGithubCom20242BetterCallFirewallInternalModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5a72dc82DecodeGithubCom20242BetterCallFirewallInternalModels2(l, v)
}
