// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -destination=mock.go -source=usecase.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/2024_2_BetterCallFirewall/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddNewSticker mocks base method.
func (m *MockRepository) AddNewSticker(ctx context.Context, filepath string, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSticker", ctx, filepath, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewSticker indicates an expected call of AddNewSticker.
func (mr *MockRepositoryMockRecorder) AddNewSticker(ctx, filepath, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSticker", reflect.TypeOf((*MockRepository)(nil).AddNewSticker), ctx, filepath, userID)
}

// GetAllStickers mocks base method.
func (m *MockRepository) GetAllStickers(ctx context.Context) ([]*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStickers", ctx)
	ret0, _ := ret[0].([]*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStickers indicates an expected call of GetAllStickers.
func (mr *MockRepositoryMockRecorder) GetAllStickers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStickers", reflect.TypeOf((*MockRepository)(nil).GetAllStickers), ctx)
}

// GetMineStickers mocks base method.
func (m *MockRepository) GetMineStickers(ctx context.Context, userID uint32) ([]*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMineStickers", ctx, userID)
	ret0, _ := ret[0].([]*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMineStickers indicates an expected call of GetMineStickers.
func (mr *MockRepositoryMockRecorder) GetMineStickers(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMineStickers", reflect.TypeOf((*MockRepository)(nil).GetMineStickers), ctx, userID)
}
