// Code generated by MockGen. DO NOT EDIT.
// Source: controller.go
//
// Generated by this command:
//
//	mockgen -destination=mock.go -source=controller.go -package=controller
//

// Package controller is a generated GoMock package.
package controller

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	models "github.com/2024_2_BetterCallFirewall/internal/models"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
	isgomock struct{}
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// AddNewSticker mocks base method.
func (m *MockUsecase) AddNewSticker(ctx context.Context, filepath string, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNewSticker", ctx, filepath, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddNewSticker indicates an expected call of AddNewSticker.
func (mr *MockUsecaseMockRecorder) AddNewSticker(ctx, filepath, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNewSticker", reflect.TypeOf((*MockUsecase)(nil).AddNewSticker), ctx, filepath, userID)
}

// GetAllStickers mocks base method.
func (m *MockUsecase) GetAllStickers(ctx context.Context) ([]*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllStickers", ctx)
	ret0, _ := ret[0].([]*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllStickers indicates an expected call of GetAllStickers.
func (mr *MockUsecaseMockRecorder) GetAllStickers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllStickers", reflect.TypeOf((*MockUsecase)(nil).GetAllStickers), ctx)
}

// GetMineStickers mocks base method.
func (m *MockUsecase) GetMineStickers(ctx context.Context, userID uint32) ([]*models.Picture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMineStickers", ctx, userID)
	ret0, _ := ret[0].([]*models.Picture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMineStickers indicates an expected call of GetMineStickers.
func (mr *MockUsecaseMockRecorder) GetMineStickers(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMineStickers", reflect.TypeOf((*MockUsecase)(nil).GetMineStickers), ctx, userID)
}

// MockResponder is a mock of Responder interface.
type MockResponder struct {
	ctrl     *gomock.Controller
	recorder *MockResponderMockRecorder
	isgomock struct{}
}

// MockResponderMockRecorder is the mock recorder for MockResponder.
type MockResponderMockRecorder struct {
	mock *MockResponder
}

// NewMockResponder creates a new mock instance.
func NewMockResponder(ctrl *gomock.Controller) *MockResponder {
	mock := &MockResponder{ctrl: ctrl}
	mock.recorder = &MockResponderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResponder) EXPECT() *MockResponderMockRecorder {
	return m.recorder
}

// ErrorBadRequest mocks base method.
func (m *MockResponder) ErrorBadRequest(w http.ResponseWriter, err error, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorBadRequest", w, err, requestID)
}

// ErrorBadRequest indicates an expected call of ErrorBadRequest.
func (mr *MockResponderMockRecorder) ErrorBadRequest(w, err, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorBadRequest", reflect.TypeOf((*MockResponder)(nil).ErrorBadRequest), w, err, requestID)
}

// ErrorInternal mocks base method.
func (m *MockResponder) ErrorInternal(w http.ResponseWriter, err error, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorInternal", w, err, requestID)
}

// ErrorInternal indicates an expected call of ErrorInternal.
func (mr *MockResponderMockRecorder) ErrorInternal(w, err, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorInternal", reflect.TypeOf((*MockResponder)(nil).ErrorInternal), w, err, requestID)
}

// LogError mocks base method.
func (m *MockResponder) LogError(err error, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogError", err, requestID)
}

// LogError indicates an expected call of LogError.
func (mr *MockResponderMockRecorder) LogError(err, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogError", reflect.TypeOf((*MockResponder)(nil).LogError), err, requestID)
}

// OutputJSON mocks base method.
func (m *MockResponder) OutputJSON(w http.ResponseWriter, data any, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputJSON", w, data, requestID)
}

// OutputJSON indicates an expected call of OutputJSON.
func (mr *MockResponderMockRecorder) OutputJSON(w, data, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputJSON", reflect.TypeOf((*MockResponder)(nil).OutputJSON), w, data, requestID)
}

// OutputNoMoreContentJSON mocks base method.
func (m *MockResponder) OutputNoMoreContentJSON(w http.ResponseWriter, requestID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OutputNoMoreContentJSON", w, requestID)
}

// OutputNoMoreContentJSON indicates an expected call of OutputNoMoreContentJSON.
func (mr *MockResponderMockRecorder) OutputNoMoreContentJSON(w, requestID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputNoMoreContentJSON", reflect.TypeOf((*MockResponder)(nil).OutputNoMoreContentJSON), w, requestID)
}
