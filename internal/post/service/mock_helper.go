// Code generated by MockGen. DO NOT EDIT.
// Source: post_profile.go
//
// Generated by this command:
//
//	mockgen -destination=mock_helper.go -source=post_profile.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/2024_2_BetterCallFirewall/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockPostProfileDB is a mock of PostProfileDB interface.
type MockPostProfileDB struct {
	ctrl     *gomock.Controller
	recorder *MockPostProfileDBMockRecorder
	isgomock struct{}
}

// MockPostProfileDBMockRecorder is the mock recorder for MockPostProfileDB.
type MockPostProfileDBMockRecorder struct {
	mock *MockPostProfileDB
}

// NewMockPostProfileDB creates a new mock instance.
func NewMockPostProfileDB(ctrl *gomock.Controller) *MockPostProfileDB {
	mock := &MockPostProfileDB{ctrl: ctrl}
	mock.recorder = &MockPostProfileDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostProfileDB) EXPECT() *MockPostProfileDBMockRecorder {
	return m.recorder
}

// CheckLikes mocks base method.
func (m *MockPostProfileDB) CheckLikes(ctx context.Context, postID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLikes", ctx, postID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLikes indicates an expected call of CheckLikes.
func (mr *MockPostProfileDBMockRecorder) CheckLikes(ctx, postID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLikes", reflect.TypeOf((*MockPostProfileDB)(nil).CheckLikes), ctx, postID, userID)
}

// GetAuthorPosts mocks base method.
func (m *MockPostProfileDB) GetAuthorPosts(ctx context.Context, header *models.Header) ([]*models.PostDto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorPosts", ctx, header)
	ret0, _ := ret[0].([]*models.PostDto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorPosts indicates an expected call of GetAuthorPosts.
func (mr *MockPostProfileDBMockRecorder) GetAuthorPosts(ctx, header any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorPosts", reflect.TypeOf((*MockPostProfileDB)(nil).GetAuthorPosts), ctx, header)
}

// GetCommentCount mocks base method.
func (m *MockPostProfileDB) GetCommentCount(ctx context.Context, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCount", ctx, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCount indicates an expected call of GetCommentCount.
func (mr *MockPostProfileDBMockRecorder) GetCommentCount(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCount", reflect.TypeOf((*MockPostProfileDB)(nil).GetCommentCount), ctx, postID)
}

// GetLikesOnPost mocks base method.
func (m *MockPostProfileDB) GetLikesOnPost(ctx context.Context, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesOnPost", ctx, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesOnPost indicates an expected call of GetLikesOnPost.
func (mr *MockPostProfileDBMockRecorder) GetLikesOnPost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesOnPost", reflect.TypeOf((*MockPostProfileDB)(nil).GetLikesOnPost), ctx, postID)
}
