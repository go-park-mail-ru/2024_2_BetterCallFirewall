// Code generated by MockGen. DO NOT EDIT.
// Source: post.go
//
// Generated by this command:
//
//	mockgen -destination=mock.go -source=post.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/2024_2_BetterCallFirewall/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockDB is a mock of DB interface.
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
	isgomock struct{}
}

// MockDBMockRecorder is the mock recorder for MockDB.
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance.
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// CheckLikes mocks base method.
func (m *MockDB) CheckLikes(ctx context.Context, postID, userID uint32) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLikes", ctx, postID, userID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLikes indicates an expected call of CheckLikes.
func (mr *MockDBMockRecorder) CheckLikes(ctx, postID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLikes", reflect.TypeOf((*MockDB)(nil).CheckLikes), ctx, postID, userID)
}

// Create mocks base method.
func (m *MockDB) Create(ctx context.Context, post *models.Post) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, post)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDBMockRecorder) Create(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDB)(nil).Create), ctx, post)
}

// CreateCommunityPost mocks base method.
func (m *MockDB) CreateCommunityPost(ctx context.Context, post *models.Post, communityID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommunityPost", ctx, post, communityID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommunityPost indicates an expected call of CreateCommunityPost.
func (mr *MockDBMockRecorder) CreateCommunityPost(ctx, post, communityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommunityPost", reflect.TypeOf((*MockDB)(nil).CreateCommunityPost), ctx, post, communityID)
}

// Delete mocks base method.
func (m *MockDB) Delete(ctx context.Context, postID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, postID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockDBMockRecorder) Delete(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDB)(nil).Delete), ctx, postID)
}

// DeleteLikeFromPost mocks base method.
func (m *MockDB) DeleteLikeFromPost(ctx context.Context, postID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteLikeFromPost", ctx, postID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteLikeFromPost indicates an expected call of DeleteLikeFromPost.
func (mr *MockDBMockRecorder) DeleteLikeFromPost(ctx, postID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLikeFromPost", reflect.TypeOf((*MockDB)(nil).DeleteLikeFromPost), ctx, postID, userID)
}

// Get mocks base method.
func (m *MockDB) Get(ctx context.Context, postID uint32) (*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, postID)
	ret0, _ := ret[0].(*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDBMockRecorder) Get(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), ctx, postID)
}

// GetCommentCount mocks base method.
func (m *MockDB) GetCommentCount(ctx context.Context, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentCount", ctx, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentCount indicates an expected call of GetCommentCount.
func (mr *MockDBMockRecorder) GetCommentCount(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentCount", reflect.TypeOf((*MockDB)(nil).GetCommentCount), ctx, postID)
}

// GetCommunityPosts mocks base method.
func (m *MockDB) GetCommunityPosts(ctx context.Context, communityID, lastID uint32) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommunityPosts", ctx, communityID, lastID)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommunityPosts indicates an expected call of GetCommunityPosts.
func (mr *MockDBMockRecorder) GetCommunityPosts(ctx, communityID, lastID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommunityPosts", reflect.TypeOf((*MockDB)(nil).GetCommunityPosts), ctx, communityID, lastID)
}

// GetFriendsPosts mocks base method.
func (m *MockDB) GetFriendsPosts(ctx context.Context, friendsID []uint32, lastID uint32) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsPosts", ctx, friendsID, lastID)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsPosts indicates an expected call of GetFriendsPosts.
func (mr *MockDBMockRecorder) GetFriendsPosts(ctx, friendsID, lastID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsPosts", reflect.TypeOf((*MockDB)(nil).GetFriendsPosts), ctx, friendsID, lastID)
}

// GetLikesOnPost mocks base method.
func (m *MockDB) GetLikesOnPost(ctx context.Context, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesOnPost", ctx, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesOnPost indicates an expected call of GetLikesOnPost.
func (mr *MockDBMockRecorder) GetLikesOnPost(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesOnPost", reflect.TypeOf((*MockDB)(nil).GetLikesOnPost), ctx, postID)
}

// GetPostAuthor mocks base method.
func (m *MockDB) GetPostAuthor(ctx context.Context, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostAuthor", ctx, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostAuthor indicates an expected call of GetPostAuthor.
func (mr *MockDBMockRecorder) GetPostAuthor(ctx, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostAuthor", reflect.TypeOf((*MockDB)(nil).GetPostAuthor), ctx, postID)
}

// GetPosts mocks base method.
func (m *MockDB) GetPosts(ctx context.Context, lastID uint32) ([]*models.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, lastID)
	ret0, _ := ret[0].([]*models.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockDBMockRecorder) GetPosts(ctx, lastID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockDB)(nil).GetPosts), ctx, lastID)
}

// SetLikeToPost mocks base method.
func (m *MockDB) SetLikeToPost(ctx context.Context, postID, userID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetLikeToPost", ctx, postID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetLikeToPost indicates an expected call of SetLikeToPost.
func (mr *MockDBMockRecorder) SetLikeToPost(ctx, postID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLikeToPost", reflect.TypeOf((*MockDB)(nil).SetLikeToPost), ctx, postID, userID)
}

// Update mocks base method.
func (m *MockDB) Update(ctx context.Context, post *models.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockDBMockRecorder) Update(ctx, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDB)(nil).Update), ctx, post)
}

// MockProfileRepo is a mock of ProfileRepo interface.
type MockProfileRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProfileRepoMockRecorder
	isgomock struct{}
}

// MockProfileRepoMockRecorder is the mock recorder for MockProfileRepo.
type MockProfileRepoMockRecorder struct {
	mock *MockProfileRepo
}

// NewMockProfileRepo creates a new mock instance.
func NewMockProfileRepo(ctrl *gomock.Controller) *MockProfileRepo {
	mock := &MockProfileRepo{ctrl: ctrl}
	mock.recorder = &MockProfileRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileRepo) EXPECT() *MockProfileRepoMockRecorder {
	return m.recorder
}

// GetFriendsID mocks base method.
func (m *MockProfileRepo) GetFriendsID(ctx context.Context, userID uint32) ([]uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFriendsID", ctx, userID)
	ret0, _ := ret[0].([]uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFriendsID indicates an expected call of GetFriendsID.
func (mr *MockProfileRepoMockRecorder) GetFriendsID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFriendsID", reflect.TypeOf((*MockProfileRepo)(nil).GetFriendsID), ctx, userID)
}

// GetHeader mocks base method.
func (m *MockProfileRepo) GetHeader(ctx context.Context, userID uint32) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", ctx, userID)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockProfileRepoMockRecorder) GetHeader(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockProfileRepo)(nil).GetHeader), ctx, userID)
}

// MockCommunityRepo is a mock of CommunityRepo interface.
type MockCommunityRepo struct {
	ctrl     *gomock.Controller
	recorder *MockCommunityRepoMockRecorder
	isgomock struct{}
}

// MockCommunityRepoMockRecorder is the mock recorder for MockCommunityRepo.
type MockCommunityRepoMockRecorder struct {
	mock *MockCommunityRepo
}

// NewMockCommunityRepo creates a new mock instance.
func NewMockCommunityRepo(ctrl *gomock.Controller) *MockCommunityRepo {
	mock := &MockCommunityRepo{ctrl: ctrl}
	mock.recorder = &MockCommunityRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommunityRepo) EXPECT() *MockCommunityRepoMockRecorder {
	return m.recorder
}

// CheckAccess mocks base method.
func (m *MockCommunityRepo) CheckAccess(ctx context.Context, communityID, userID uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAccess", ctx, communityID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckAccess indicates an expected call of CheckAccess.
func (mr *MockCommunityRepoMockRecorder) CheckAccess(ctx, communityID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAccess", reflect.TypeOf((*MockCommunityRepo)(nil).CheckAccess), ctx, communityID, userID)
}

// GetHeader mocks base method.
func (m *MockCommunityRepo) GetHeader(ctx context.Context, communityID uint32) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", ctx, communityID)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockCommunityRepoMockRecorder) GetHeader(ctx, communityID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockCommunityRepo)(nil).GetHeader), ctx, communityID)
}
