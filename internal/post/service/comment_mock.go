// Code generated by MockGen. DO NOT EDIT.
// Source: comment.go
//
// Generated by this command:
//
//	mockgen -destination=comment_mock.go -source=comment.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	models "github.com/2024_2_BetterCallFirewall/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockdbI is a mock of dbI interface.
type MockdbI struct {
	ctrl     *gomock.Controller
	recorder *MockdbIMockRecorder
	isgomock struct{}
}

// MockdbIMockRecorder is the mock recorder for MockdbI.
type MockdbIMockRecorder struct {
	mock *MockdbI
}

// NewMockdbI creates a new mock instance.
func NewMockdbI(ctrl *gomock.Controller) *MockdbI {
	mock := &MockdbI{ctrl: ctrl}
	mock.recorder = &MockdbIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdbI) EXPECT() *MockdbIMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockdbI) CreateComment(ctx context.Context, comment *models.Content, userID, postID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment, userID, postID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockdbIMockRecorder) CreateComment(ctx, comment, userID, postID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockdbI)(nil).CreateComment), ctx, comment, userID, postID)
}

// DeleteComment mocks base method.
func (m *MockdbI) DeleteComment(ctx context.Context, commentID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockdbIMockRecorder) DeleteComment(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockdbI)(nil).DeleteComment), ctx, commentID)
}

// GetCommentAuthor mocks base method.
func (m *MockdbI) GetCommentAuthor(ctx context.Context, commentID uint32) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentAuthor", ctx, commentID)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentAuthor indicates an expected call of GetCommentAuthor.
func (mr *MockdbIMockRecorder) GetCommentAuthor(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentAuthor", reflect.TypeOf((*MockdbI)(nil).GetCommentAuthor), ctx, commentID)
}

// GetComments mocks base method.
func (m *MockdbI) GetComments(ctx context.Context, postID, lastID uint32, newest bool) ([]*models.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComments", ctx, postID, lastID, newest)
	ret0, _ := ret[0].([]*models.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComments indicates an expected call of GetComments.
func (mr *MockdbIMockRecorder) GetComments(ctx, postID, lastID, newest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComments", reflect.TypeOf((*MockdbI)(nil).GetComments), ctx, postID, lastID, newest)
}

// UpdateComment mocks base method.
func (m *MockdbI) UpdateComment(ctx context.Context, comment *models.Content, commentID uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockdbIMockRecorder) UpdateComment(ctx, comment, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockdbI)(nil).UpdateComment), ctx, comment, commentID)
}

// MockprofileRepoI is a mock of profileRepoI interface.
type MockprofileRepoI struct {
	ctrl     *gomock.Controller
	recorder *MockprofileRepoIMockRecorder
	isgomock struct{}
}

// MockprofileRepoIMockRecorder is the mock recorder for MockprofileRepoI.
type MockprofileRepoIMockRecorder struct {
	mock *MockprofileRepoI
}

// NewMockprofileRepoI creates a new mock instance.
func NewMockprofileRepoI(ctrl *gomock.Controller) *MockprofileRepoI {
	mock := &MockprofileRepoI{ctrl: ctrl}
	mock.recorder = &MockprofileRepoIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofileRepoI) EXPECT() *MockprofileRepoIMockRecorder {
	return m.recorder
}

// GetHeader mocks base method.
func (m *MockprofileRepoI) GetHeader(ctx context.Context, userID uint32) (*models.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", ctx, userID)
	ret0, _ := ret[0].(*models.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockprofileRepoIMockRecorder) GetHeader(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockprofileRepoI)(nil).GetHeader), ctx, userID)
}
